/**
 * FDS
 * This API allows to communicate with FDS (Food Delivery System) server. 
 *
 * The version of the OpenAPI document: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openapi.deliveryApp.api;

import com.openapi.deliveryApp.invoker.ApiInvoker;
import com.openapi.deliveryApp.invoker.ApiException;
import com.openapi.deliveryApp.invoker.Pair;

import com.openapi.deliveryApp.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.openapi.deliveryApp.model.DeliveryAcceptOrderRequest;
import com.openapi.deliveryApp.model.DeliveryDropRequest;
import com.openapi.deliveryApp.model.DeliveryPersonDetails;
import java.io.File;
import com.openapi.deliveryApp.model.FoodItem;
import com.openapi.deliveryApp.model.FoodItemFull;
import com.openapi.deliveryApp.model.GetOrders200Response;
import com.openapi.deliveryApp.model.LoginRequest;
import com.openapi.deliveryApp.model.Order;
import com.openapi.deliveryApp.model.PlaceOrderRequest;
import com.openapi.deliveryApp.model.Profile;
import com.openapi.deliveryApp.model.UserDetails;
import com.openapi.deliveryApp.model.VendorAddProductRequest;
import com.openapi.deliveryApp.model.VendorChangeProductAvailabileRequest;
import com.openapi.deliveryApp.model.VendorDetails;
import com.openapi.deliveryApp.model.VendorEditProductRequest;
import com.openapi.deliveryApp.model.VendorGetRequestedOrders200ResponseInner;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  //String basePath = "http://13.233.99.87:8080";
  String basePath = "http://192.168.159.69:8080";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Check Availability
  * Check the availability of a specific item by providing its ID and quantity count
   * @param id ID of the item to check availability for
   * @param count Quantity count to check availability for
   * @return Boolean
  */
  public Boolean checkProductAvailable (String id, Integer count) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling checkProductAvailable",
        new ApiException(400, "Missing the required parameter 'id' when calling checkProductAvailable"));
    }
    // verify the required parameter 'count' is set
    if (count == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'count' when calling checkProductAvailable",
        new ApiException(400, "Missing the required parameter 'count' when calling checkProductAvailable"));
    }

    // create path and map variables
    String path = "/product/{id}/available".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check Availability
   * Check the availability of a specific item by providing its ID and quantity count
   * @param id ID of the item to check availability for   * @param count Quantity count to check availability for
  */
  public void checkProductAvailable (String id, Integer count, final Response.Listener<Boolean> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling checkProductAvailable",
        new ApiException(400, "Missing the required parameter 'id' when calling checkProductAvailable"));
    }
    // verify the required parameter 'count' is set
    if (count == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'count' when calling checkProductAvailable",
        new ApiException(400, "Missing the required parameter 'count' when calling checkProductAvailable"));
    }

    // create path and map variables
    String path = "/product/{id}/available".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Boolean) ApiInvoker.deserialize(localVarResponse,  "", Boolean.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Confirm Order
  * Confirm Order Delivery
   * @param sessionId 
   * @param body 
   * @return String
  */
  public String confirmOrder (String sessionId, String body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling confirmOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling confirmOrder"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling confirmOrder",
        new ApiException(400, "Missing the required parameter 'body' when calling confirmOrder"));
    }

    // create path and map variables
    String path = "/order/confirm";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Confirm Order
   * Confirm Order Delivery
   * @param sessionId    * @param body 
  */
  public void confirmOrder (String sessionId, String body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling confirmOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling confirmOrder"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling confirmOrder",
        new ApiException(400, "Missing the required parameter 'body' when calling confirmOrder"));
    }

    // create path and map variables
    String path = "/order/confirm".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Accept Order
  * 
   * @param sessionId Session ID of the delivery person
   * @param deliveryAcceptOrderRequest 
   * @return void
  */
  public void deliveryAcceptOrder (String sessionId, DeliveryAcceptOrderRequest deliveryAcceptOrderRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deliveryAcceptOrderRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryAcceptOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryAcceptOrder"));
    }

    // create path and map variables
    String path = "/delivery/acceptOrder";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Accept Order
   * 
   * @param sessionId Session ID of the delivery person   * @param deliveryAcceptOrderRequest 
  */
  public void deliveryAcceptOrder (String sessionId, DeliveryAcceptOrderRequest deliveryAcceptOrderRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deliveryAcceptOrderRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryAcceptOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryAcceptOrder"));
    }

    // create path and map variables
    String path = "/delivery/acceptOrder".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Drop Order
  * 
   * @param sessionId Session ID of the delivery person
   * @param deliveryDropRequest 
   * @return void
  */
  public void deliveryDrop (String sessionId, DeliveryDropRequest deliveryDropRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deliveryDropRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryDrop",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryDrop"));
    }

    // create path and map variables
    String path = "/delivery/dropOrder";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Drop Order
   * 
   * @param sessionId Session ID of the delivery person   * @param deliveryDropRequest 
  */
  public void deliveryDrop (String sessionId, DeliveryDropRequest deliveryDropRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deliveryDropRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryDrop",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryDrop"));
    }

    // create path and map variables
    String path = "/delivery/dropOrder".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Pickup Order
  * 
   * @param sessionId Session ID of the delivery person
   * @param orderId ID of the order to be picked up
   * @return void
  */
  public void deliveryPick (String sessionId, String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryPick",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryPick"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling deliveryPick",
        new ApiException(400, "Missing the required parameter 'orderId' when calling deliveryPick"));
    }

    // create path and map variables
    String path = "/delivery/pickupOrder";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderId", orderId));
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Pickup Order
   * 
   * @param sessionId Session ID of the delivery person   * @param orderId ID of the order to be picked up
  */
  public void deliveryPick (String sessionId, String orderId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryPick",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryPick"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling deliveryPick",
        new ApiException(400, "Missing the required parameter 'orderId' when calling deliveryPick"));
    }

    // create path and map variables
    String path = "/delivery/pickupOrder".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "orderId", orderId));

    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get List of Accepted Orders
  * 
   * @param sessionId Session ID of the delivery person
   * @return List<Order>
  */
  public List<Order> deliveryViewAcceptedOrders (String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryViewAcceptedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryViewAcceptedOrders"));
    }

    // create path and map variables
    String path = "/delivery/getAcceptedOrders";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Order>) ApiInvoker.deserialize(localVarResponse, "array", Order.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get List of Accepted Orders
   * 
   * @param sessionId Session ID of the delivery person
  */
  public void deliveryViewAcceptedOrders (String sessionId, final Response.Listener<List<Order>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryViewAcceptedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryViewAcceptedOrders"));
    }

    // create path and map variables
    String path = "/delivery/getAcceptedOrders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Order>) ApiInvoker.deserialize(localVarResponse,  "array", Order.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View Waiting Orders
  * 
   * @param sessionId Session ID of the delivery person
   * @return List<Order>
  */
  public List<Order> deliveryViewWaitingOrders (String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryViewWaitingOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryViewWaitingOrders"));
    }

    // create path and map variables
    String path = "/delivery/viewWaitingOrders";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Order>) ApiInvoker.deserialize(localVarResponse, "array", Order.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View Waiting Orders
   * 
   * @param sessionId Session ID of the delivery person
  */
  public void deliveryViewWaitingOrders (String sessionId, final Response.Listener<List<Order>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling deliveryViewWaitingOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling deliveryViewWaitingOrders"));
    }

    // create path and map variables
    String path = "/delivery/viewWaitingOrders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Order>) ApiInvoker.deserialize(localVarResponse,  "array", Order.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get file by file ID
  * Retrieve a file, typically an image, based on the provided file ID.
   * @param fileId ID of the file to retrieve
   * @param sessionId 
   * @return File
  */
  public File getFile (String fileId, String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getFile"));
    }

    // create path and map variables
    String path = "/file/{fileId}".replaceAll("\\{" + "fileId" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get file by file ID
   * Retrieve a file, typically an image, based on the provided file ID.
   * @param fileId ID of the file to retrieve   * @param sessionId 
  */
  public void getFile (String fileId, String sessionId, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'fileId' when calling getFile",
        new ApiException(400, "Missing the required parameter 'fileId' when calling getFile"));
    }

    // create path and map variables
    String path = "/file/{fileId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "fileId" + "\\}", apiInvoker.escapeString(fileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @param orderId 
   * @return GetOrders200Response
  */
  public GetOrders200Response getOrders (String sessionId, String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling getOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling getOrders"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getOrders",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getOrders"));
    }

    // create path and map variables
    String path = "/order";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    headerParams.put("orderId", ApiInvoker.parameterToString(orderId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetOrders200Response) ApiInvoker.deserialize(localVarResponse, "", GetOrders200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId    * @param orderId 
  */
  public void getOrders (String sessionId, String orderId, final Response.Listener<GetOrders200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling getOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling getOrders"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getOrders",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getOrders"));
    }

    // create path and map variables
    String path = "/order".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    headerParams.put("orderId", ApiInvoker.parameterToString(orderId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetOrders200Response) ApiInvoker.deserialize(localVarResponse,  "", GetOrders200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Product Details
  * Retrieve details for a specific item by providing its ID
   * @param id ID of the item to retrieve details for
   * @return FoodItemFull
  */
  public FoodItemFull getProduct (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling getProduct"));
    }

    // create path and map variables
    String path = "/product/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FoodItemFull) ApiInvoker.deserialize(localVarResponse, "", FoodItemFull.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Product Details
   * Retrieve details for a specific item by providing its ID
   * @param id ID of the item to retrieve details for
  */
  public void getProduct (String id, final Response.Listener<FoodItemFull> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProduct",
        new ApiException(400, "Missing the required parameter 'id' when calling getProduct"));
    }

    // create path and map variables
    String path = "/product/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FoodItemFull) ApiInvoker.deserialize(localVarResponse,  "", FoodItemFull.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get information about the another user from username if the current user is allowed to do so. Anyone can see information about all the Vendors, Delivery Persons and the user himself.
   * @param sessionId 
   * @return Profile
  */
  public Profile getProfile (String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling getProfile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling getProfile"));
    }

    // create path and map variables
    String path = "/profile";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Profile) ApiInvoker.deserialize(localVarResponse, "", Profile.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get information about the another user from username if the current user is allowed to do so. Anyone can see information about all the Vendors, Delivery Persons and the user himself.
   * @param sessionId 
  */
  public void getProfile (String sessionId, final Response.Listener<Profile> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling getProfile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling getProfile"));
    }

    // create path and map variables
    String path = "/profile".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Profile) ApiInvoker.deserialize(localVarResponse,  "", Profile.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Login to user account
  * Get username and password and authenticate the user. Returns sessionId for further requests
   * @param loginRequest 
   * @return String
  */
  public String login (LoginRequest loginRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = loginRequest;
    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling login",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling login"));
    }

    // create path and map variables
    String path = "/login";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Login to user account
   * Get username and password and authenticate the user. Returns sessionId for further requests
   * @param loginRequest 
  */
  public void login (LoginRequest loginRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = loginRequest;

    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling login",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling login"));
    }

    // create path and map variables
    String path = "/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Login to delivery person account
  * Get username and password and authenticate the delivery person. Returns sessionId for further requests
   * @param loginRequest 
   * @return String
  */
  public String loginDeliveryPerson (LoginRequest loginRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = loginRequest;
    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling loginDeliveryPerson",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling loginDeliveryPerson"));
    }

    // create path and map variables
    String path = "/deliveryPerson/login";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Login to delivery person account
   * Get username and password and authenticate the delivery person. Returns sessionId for further requests
   * @param loginRequest 
  */
  public void loginDeliveryPerson (LoginRequest loginRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = loginRequest;

    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling loginDeliveryPerson",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling loginDeliveryPerson"));
    }

    // create path and map variables
    String path = "/deliveryPerson/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Login to vendor account
  * Get username and password and authenticate the vendor. Returns sessionId for further requests
   * @param loginRequest 
   * @return String
  */
  public String loginVendor (LoginRequest loginRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = loginRequest;
    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling loginVendor",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling loginVendor"));
    }

    // create path and map variables
    String path = "/vendor/login";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Login to vendor account
   * Get username and password and authenticate the vendor. Returns sessionId for further requests
   * @param loginRequest 
  */
  public void loginVendor (LoginRequest loginRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = loginRequest;

    // verify the required parameter 'loginRequest' is set
    if (loginRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'loginRequest' when calling loginVendor",
        new ApiException(400, "Missing the required parameter 'loginRequest' when calling loginVendor"));
    }

    // create path and map variables
    String path = "/vendor/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Place the order
  * Place the order from the cart, with item id as key and quantity as value.
   * @param sessionId 
   * @param placeOrderRequest 
   * @return String
  */
  public String placeOrder (String sessionId, PlaceOrderRequest placeOrderRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = placeOrderRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling placeOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling placeOrder"));
    }
    // verify the required parameter 'placeOrderRequest' is set
    if (placeOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeOrderRequest' when calling placeOrder",
        new ApiException(400, "Missing the required parameter 'placeOrderRequest' when calling placeOrder"));
    }

    // create path and map variables
    String path = "/order/place";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Place the order
   * Place the order from the cart, with item id as key and quantity as value.
   * @param sessionId    * @param placeOrderRequest 
  */
  public void placeOrder (String sessionId, PlaceOrderRequest placeOrderRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = placeOrderRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling placeOrder",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling placeOrder"));
    }
    // verify the required parameter 'placeOrderRequest' is set
    if (placeOrderRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placeOrderRequest' when calling placeOrder",
        new ApiException(400, "Missing the required parameter 'placeOrderRequest' when calling placeOrder"));
    }

    // create path and map variables
    String path = "/order/place".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload a file
  * Upload an image to server for referencing elsewhere.
   * @param sessionId 
   * @param body 
   * @return String
  */
  public String putFile (String sessionId, File body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling putFile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling putFile"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putFile",
        new ApiException(400, "Missing the required parameter 'body' when calling putFile"));
    }

    // create path and map variables
    String path = "/file";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "image/*"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload a file
   * Upload an image to server for referencing elsewhere.
   * @param sessionId    * @param body 
  */
  public void putFile (String sessionId, File body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling putFile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling putFile"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putFile",
        new ApiException(400, "Missing the required parameter 'body' when calling putFile"));
    }

    // create path and map variables
    String path = "/file".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "image/*"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search for items
  * Search for items based on search query and filters (Authentication is not necessary)
   * @param sessionId 
   * @param query 
   * @return List<FoodItem>
  */
  public List<FoodItem> query (String sessionId, String query) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling query",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling query"));
    }

    // create path and map variables
    String path = "/query";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    headerParams.put("query", ApiInvoker.parameterToString(query));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<FoodItem>) ApiInvoker.deserialize(localVarResponse, "array", FoodItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search for items
   * Search for items based on search query and filters (Authentication is not necessary)
   * @param sessionId    * @param query 
  */
  public void query (String sessionId, String query, final Response.Listener<List<FoodItem>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling query",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling query"));
    }

    // create path and map variables
    String path = "/query".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    headerParams.put("query", ApiInvoker.parameterToString(query));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<FoodItem>) ApiInvoker.deserialize(localVarResponse,  "array", FoodItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Register a new consumer?
  * Create a new user account with unique username, strong password for authentication and other user info.
   * @param userDetails 
   * @return String
  */
  public String register (UserDetails userDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = userDetails;
    // verify the required parameter 'userDetails' is set
    if (userDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userDetails' when calling register",
        new ApiException(400, "Missing the required parameter 'userDetails' when calling register"));
    }

    // create path and map variables
    String path = "/register";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Register a new consumer?
   * Create a new user account with unique username, strong password for authentication and other user info.
   * @param userDetails 
  */
  public void register (UserDetails userDetails, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = userDetails;

    // verify the required parameter 'userDetails' is set
    if (userDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userDetails' when calling register",
        new ApiException(400, "Missing the required parameter 'userDetails' when calling register"));
    }

    // create path and map variables
    String path = "/register".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Register a new deliveryPerson
  * Create a new deliveryPerson account with unique username, strong password for authentication and other deliveryPerson info.
   * @param deliveryPersonDetails 
   * @return String
  */
  public String registerDeliveryPerson (DeliveryPersonDetails deliveryPersonDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deliveryPersonDetails;
    // verify the required parameter 'deliveryPersonDetails' is set
    if (deliveryPersonDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deliveryPersonDetails' when calling registerDeliveryPerson",
        new ApiException(400, "Missing the required parameter 'deliveryPersonDetails' when calling registerDeliveryPerson"));
    }

    // create path and map variables
    String path = "/deliveryPerson/register";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Register a new deliveryPerson
   * Create a new deliveryPerson account with unique username, strong password for authentication and other deliveryPerson info.
   * @param deliveryPersonDetails 
  */
  public void registerDeliveryPerson (DeliveryPersonDetails deliveryPersonDetails, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deliveryPersonDetails;

    // verify the required parameter 'deliveryPersonDetails' is set
    if (deliveryPersonDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deliveryPersonDetails' when calling registerDeliveryPerson",
        new ApiException(400, "Missing the required parameter 'deliveryPersonDetails' when calling registerDeliveryPerson"));
    }

    // create path and map variables
    String path = "/deliveryPerson/register".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Register a new vendor
  * Create a new vendor account with unique username, strong password for authentication and other vendor info.
   * @param vendorDetails 
   * @return String
  */
  public String registerVendor (VendorDetails vendorDetails) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vendorDetails;
    // verify the required parameter 'vendorDetails' is set
    if (vendorDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorDetails' when calling registerVendor",
        new ApiException(400, "Missing the required parameter 'vendorDetails' when calling registerVendor"));
    }

    // create path and map variables
    String path = "/vendor/register";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Register a new vendor
   * Create a new vendor account with unique username, strong password for authentication and other vendor info.
   * @param vendorDetails 
  */
  public void registerVendor (VendorDetails vendorDetails, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vendorDetails;

    // verify the required parameter 'vendorDetails' is set
    if (vendorDetails == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorDetails' when calling registerVendor",
        new ApiException(400, "Missing the required parameter 'vendorDetails' when calling registerVendor"));
    }

    // create path and map variables
    String path = "/vendor/register".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Update userinfo of the user.
   * @param sessionId 
   * @param profile 
   * @return Profile
  */
  public Profile updateProfile (String sessionId, Profile profile) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = profile;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling updateProfile"));
    }
    // verify the required parameter 'profile' is set
    if (profile == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profile' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'profile' when calling updateProfile"));
    }

    // create path and map variables
    String path = "/profile/update";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Profile) ApiInvoker.deserialize(localVarResponse, "", Profile.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Update userinfo of the user.
   * @param sessionId    * @param profile 
  */
  public void updateProfile (String sessionId, Profile profile, final Response.Listener<Profile> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = profile;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling updateProfile"));
    }
    // verify the required parameter 'profile' is set
    if (profile == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'profile' when calling updateProfile",
        new ApiException(400, "Missing the required parameter 'profile' when calling updateProfile"));
    }

    // create path and map variables
    String path = "/profile/update".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Profile) ApiInvoker.deserialize(localVarResponse,  "", Profile.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @param vendorAddProductRequest 
   * @return String
  */
  public String vendorAddProduct (String sessionId, VendorAddProductRequest vendorAddProductRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vendorAddProductRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorAddProduct",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorAddProduct"));
    }
    // verify the required parameter 'vendorAddProductRequest' is set
    if (vendorAddProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorAddProductRequest' when calling vendorAddProduct",
        new ApiException(400, "Missing the required parameter 'vendorAddProductRequest' when calling vendorAddProduct"));
    }

    // create path and map variables
    String path = "/vendor/product/add";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId    * @param vendorAddProductRequest 
  */
  public void vendorAddProduct (String sessionId, VendorAddProductRequest vendorAddProductRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vendorAddProductRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorAddProduct",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorAddProduct"));
    }
    // verify the required parameter 'vendorAddProductRequest' is set
    if (vendorAddProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorAddProductRequest' when calling vendorAddProduct",
        new ApiException(400, "Missing the required parameter 'vendorAddProductRequest' when calling vendorAddProduct"));
    }

    // create path and map variables
    String path = "/vendor/product/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @param vendorChangeProductAvailabileRequest 
   * @return void
  */
  public void vendorChangeAvailabile (String sessionId, VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vendorChangeProductAvailabileRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorChangeAvailabile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorChangeAvailabile"));
    }
    // verify the required parameter 'vendorChangeProductAvailabileRequest' is set
    if (vendorChangeProductAvailabileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeAvailabile",
        new ApiException(400, "Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeAvailabile"));
    }

    // create path and map variables
    String path = "/vendor/changeAvailable";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId    * @param vendorChangeProductAvailabileRequest 
  */
  public void vendorChangeAvailabile (String sessionId, VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vendorChangeProductAvailabileRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorChangeAvailabile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorChangeAvailabile"));
    }
    // verify the required parameter 'vendorChangeProductAvailabileRequest' is set
    if (vendorChangeProductAvailabileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeAvailabile",
        new ApiException(400, "Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeAvailabile"));
    }

    // create path and map variables
    String path = "/vendor/changeAvailable".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @param vendorChangeProductAvailabileRequest 
   * @return void
  */
  public void vendorChangeProductAvailabile (String sessionId, VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vendorChangeProductAvailabileRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorChangeProductAvailabile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorChangeProductAvailabile"));
    }
    // verify the required parameter 'vendorChangeProductAvailabileRequest' is set
    if (vendorChangeProductAvailabileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeProductAvailabile",
        new ApiException(400, "Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeProductAvailabile"));
    }

    // create path and map variables
    String path = "/vendor/product/changeAvailable";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId    * @param vendorChangeProductAvailabileRequest 
  */
  public void vendorChangeProductAvailabile (String sessionId, VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vendorChangeProductAvailabileRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorChangeProductAvailabile",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorChangeProductAvailabile"));
    }
    // verify the required parameter 'vendorChangeProductAvailabileRequest' is set
    if (vendorChangeProductAvailabileRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeProductAvailabile",
        new ApiException(400, "Missing the required parameter 'vendorChangeProductAvailabileRequest' when calling vendorChangeProductAvailabile"));
    }

    // create path and map variables
    String path = "/vendor/product/changeAvailable".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @param vendorEditProductRequest 
   * @return FoodItemFull
  */
  public FoodItemFull vendorEditProduct (String sessionId, VendorEditProductRequest vendorEditProductRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vendorEditProductRequest;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorEditProduct",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorEditProduct"));
    }
    // verify the required parameter 'vendorEditProductRequest' is set
    if (vendorEditProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorEditProductRequest' when calling vendorEditProduct",
        new ApiException(400, "Missing the required parameter 'vendorEditProductRequest' when calling vendorEditProduct"));
    }

    // create path and map variables
    String path = "/vendor/product/edit";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FoodItemFull) ApiInvoker.deserialize(localVarResponse, "", FoodItemFull.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId    * @param vendorEditProductRequest 
  */
  public void vendorEditProduct (String sessionId, VendorEditProductRequest vendorEditProductRequest, final Response.Listener<FoodItemFull> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vendorEditProductRequest;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorEditProduct",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorEditProduct"));
    }
    // verify the required parameter 'vendorEditProductRequest' is set
    if (vendorEditProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vendorEditProductRequest' when calling vendorEditProduct",
        new ApiException(400, "Missing the required parameter 'vendorEditProductRequest' when calling vendorEditProduct"));
    }

    // create path and map variables
    String path = "/vendor/product/edit".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FoodItemFull) ApiInvoker.deserialize(localVarResponse,  "", FoodItemFull.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @return List<VendorGetRequestedOrders200ResponseInner>
  */
  public List<VendorGetRequestedOrders200ResponseInner> vendorGetAcceptedOrders (String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorGetAcceptedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorGetAcceptedOrders"));
    }

    // create path and map variables
    String path = "/vendor/order/accepted";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<VendorGetRequestedOrders200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", VendorGetRequestedOrders200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId 
  */
  public void vendorGetAcceptedOrders (String sessionId, final Response.Listener<List<VendorGetRequestedOrders200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorGetAcceptedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorGetAcceptedOrders"));
    }

    // create path and map variables
    String path = "/vendor/order/accepted".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<VendorGetRequestedOrders200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", VendorGetRequestedOrders200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * 
   * @param sessionId 
   * @return List<VendorGetRequestedOrders200ResponseInner>
  */
  public List<VendorGetRequestedOrders200ResponseInner> vendorGetRequestedOrders (String sessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorGetRequestedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorGetRequestedOrders"));
    }

    // create path and map variables
    String path = "/vendor/order/requested";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<VendorGetRequestedOrders200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "array", VendorGetRequestedOrders200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * 
   * @param sessionId 
  */
  public void vendorGetRequestedOrders (String sessionId, final Response.Listener<List<VendorGetRequestedOrders200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionId' when calling vendorGetRequestedOrders",
        new ApiException(400, "Missing the required parameter 'sessionId' when calling vendorGetRequestedOrders"));
    }

    // create path and map variables
    String path = "/vendor/order/requested".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("sessionId", ApiInvoker.parameterToString(sessionId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<VendorGetRequestedOrders200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "array", VendorGetRequestedOrders200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
