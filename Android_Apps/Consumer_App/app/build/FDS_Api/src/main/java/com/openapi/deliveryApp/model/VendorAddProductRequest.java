/**
 * FDS
 * This API allows to communicate with FDS (Food Delivery System) server. 
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.openapi.deliveryApp.model;

import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class VendorAddProductRequest {
  
  @SerializedName("name")
  private String name = null;
  @SerializedName("thumbnail")
  private String thumbnail = null;
  @SerializedName("price")
  private Float price = null;
  @SerializedName("maxQuantity")
  private Integer maxQuantity = null;
  @SerializedName("imageUrls")
  private List<String> imageUrls = null;
  @SerializedName("tags")
  private List<String> tags = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getThumbnail() {
    return thumbnail;
  }
  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public Float getPrice() {
    return price;
  }
  public void setPrice(Float price) {
    this.price = price;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getMaxQuantity() {
    return maxQuantity;
  }
  public void setMaxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<String> getImageUrls() {
    return imageUrls;
  }
  public void setImageUrls(List<String> imageUrls) {
    this.imageUrls = imageUrls;
  }

  /**
   * tags related to food item
   **/
  @ApiModelProperty(value = "tags related to food item")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorAddProductRequest vendorAddProductRequest = (VendorAddProductRequest) o;
    return (this.name == null ? vendorAddProductRequest.name == null : this.name.equals(vendorAddProductRequest.name)) &&
        (this.thumbnail == null ? vendorAddProductRequest.thumbnail == null : this.thumbnail.equals(vendorAddProductRequest.thumbnail)) &&
        (this.price == null ? vendorAddProductRequest.price == null : this.price.equals(vendorAddProductRequest.price)) &&
        (this.maxQuantity == null ? vendorAddProductRequest.maxQuantity == null : this.maxQuantity.equals(vendorAddProductRequest.maxQuantity)) &&
        (this.imageUrls == null ? vendorAddProductRequest.imageUrls == null : this.imageUrls.equals(vendorAddProductRequest.imageUrls)) &&
        (this.tags == null ? vendorAddProductRequest.tags == null : this.tags.equals(vendorAddProductRequest.tags));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.thumbnail == null ? 0: this.thumbnail.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.maxQuantity == null ? 0: this.maxQuantity.hashCode());
    result = 31 * result + (this.imageUrls == null ? 0: this.imageUrls.hashCode());
    result = 31 * result + (this.tags == null ? 0: this.tags.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorAddProductRequest {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  thumbnail: ").append(thumbnail).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  maxQuantity: ").append(maxQuantity).append("\n");
    sb.append("  imageUrls: ").append(imageUrls).append("\n");
    sb.append("  tags: ").append(tags).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
