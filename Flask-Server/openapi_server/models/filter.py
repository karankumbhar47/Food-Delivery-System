from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _property=None, constrain_type=None, value=None):  # noqa: E501
        """Filter - a model defined in OpenAPI

        :param _property: The _property of this Filter.  # noqa: E501
        :type _property: str
        :param constrain_type: The constrain_type of this Filter.  # noqa: E501
        :type constrain_type: str
        :param value: The value of this Filter.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            '_property': str,
            'constrain_type': str,
            'value': str
        }

        self.attribute_map = {
            '_property': 'property',
            'constrain_type': 'constrainType',
            'value': 'value'
        }

        self.__property = _property
        self._constrain_type = constrain_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The filter of this Filter.  # noqa: E501
        :rtype: Filter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _property(self) -> str:
        """Gets the _property of this Filter.

        What property to apply filter on.  # noqa: E501

        :return: The _property of this Filter.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property: str):
        """Sets the _property of this Filter.

        What property to apply filter on.  # noqa: E501

        :param _property: The _property of this Filter.
        :type _property: str
        """
        allowed_values = ["price", "veg", "rating", "vendor", "category"]  # noqa: E501
        if _property not in allowed_values:
            raise ValueError(
                "Invalid value for `_property` ({0}), must be one of {1}"
                .format(_property, allowed_values)
            )

        self.__property = _property

    @property
    def constrain_type(self) -> str:
        """Gets the constrain_type of this Filter.


        :return: The constrain_type of this Filter.
        :rtype: str
        """
        return self._constrain_type

    @constrain_type.setter
    def constrain_type(self, constrain_type: str):
        """Sets the constrain_type of this Filter.


        :param constrain_type: The constrain_type of this Filter.
        :type constrain_type: str
        """
        allowed_values = ["greaterThan", "lessThan", "equals", "notEquals"]  # noqa: E501
        if constrain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `constrain_type` ({0}), must be one of {1}"
                .format(constrain_type, allowed_values)
            )

        self._constrain_type = constrain_type

    @property
    def value(self) -> str:
        """Gets the value of this Filter.


        :return: The value of this Filter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Filter.


        :param value: The value of this Filter.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
