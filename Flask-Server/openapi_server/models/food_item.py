from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class FoodItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id=None, name=None, thumbnail=None, vendor=None, price=None, rating=None, rated_by=None, tags=None):  # noqa: E501
        """FoodItem - a model defined in OpenAPI

        :param item_id: The item_id of this FoodItem.  # noqa: E501
        :type item_id: str
        :param name: The name of this FoodItem.  # noqa: E501
        :type name: str
        :param thumbnail: The thumbnail of this FoodItem.  # noqa: E501
        :type thumbnail: str
        :param vendor: The vendor of this FoodItem.  # noqa: E501
        :type vendor: str
        :param price: The price of this FoodItem.  # noqa: E501
        :type price: float
        :param rating: The rating of this FoodItem.  # noqa: E501
        :type rating: float
        :param rated_by: The rated_by of this FoodItem.  # noqa: E501
        :type rated_by: float
        :param tags: The tags of this FoodItem.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'item_id': str,
            'name': str,
            'thumbnail': str,
            'vendor': str,
            'price': float,
            'rating': float,
            'rated_by': float,
            'tags': List[str]
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'name': 'name',
            'thumbnail': 'thumbnail',
            'vendor': 'vendor',
            'price': 'price',
            'rating': 'rating',
            'rated_by': 'ratedBy',
            'tags': 'tags'
        }

        self._item_id = item_id
        self._name = name
        self._thumbnail = thumbnail
        self._vendor = vendor
        self._price = price
        self._rating = rating
        self._rated_by = rated_by
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'FoodItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The foodItem of this FoodItem.  # noqa: E501
        :rtype: FoodItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self) -> str:
        """Gets the item_id of this FoodItem.


        :return: The item_id of this FoodItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this FoodItem.


        :param item_id: The item_id of this FoodItem.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 40:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `40`")  # noqa: E501
        if item_id is not None and len(item_id) < 40:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `40`")  # noqa: E501

        self._item_id = item_id

    @property
    def name(self) -> str:
        """Gets the name of this FoodItem.


        :return: The name of this FoodItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FoodItem.


        :param name: The name of this FoodItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def thumbnail(self) -> str:
        """Gets the thumbnail of this FoodItem.


        :return: The thumbnail of this FoodItem.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail: str):
        """Sets the thumbnail of this FoodItem.


        :param thumbnail: The thumbnail of this FoodItem.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def vendor(self) -> str:
        """Gets the vendor of this FoodItem.


        :return: The vendor of this FoodItem.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """Sets the vendor of this FoodItem.


        :param vendor: The vendor of this FoodItem.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def price(self) -> float:
        """Gets the price of this FoodItem.


        :return: The price of this FoodItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this FoodItem.


        :param price: The price of this FoodItem.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def rating(self) -> float:
        """Gets the rating of this FoodItem.


        :return: The rating of this FoodItem.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this FoodItem.


        :param rating: The rating of this FoodItem.
        :type rating: float
        """

        self._rating = rating

    @property
    def rated_by(self) -> float:
        """Gets the rated_by of this FoodItem.


        :return: The rated_by of this FoodItem.
        :rtype: float
        """
        return self._rated_by

    @rated_by.setter
    def rated_by(self, rated_by: float):
        """Sets the rated_by of this FoodItem.


        :param rated_by: The rated_by of this FoodItem.
        :type rated_by: float
        """

        self._rated_by = rated_by

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this FoodItem.

        tags related to food item  # noqa: E501

        :return: The tags of this FoodItem.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this FoodItem.

        tags related to food item  # noqa: E501

        :param tags: The tags of this FoodItem.
        :type tags: List[str]
        """

        self._tags = tags
