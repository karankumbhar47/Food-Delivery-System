from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class VendorGetRequestedOrders200ResponseInnerOrderItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id=None, quantity=None):  # noqa: E501
        """VendorGetRequestedOrders200ResponseInnerOrderItemsInner - a model defined in OpenAPI

        :param item_id: The item_id of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.  # noqa: E501
        :type item_id: str
        :param quantity: The quantity of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.  # noqa: E501
        :type quantity: int
        """
        self.openapi_types = {
            'item_id': str,
            'quantity': int
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'quantity': 'quantity'
        }

        self._item_id = item_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'VendorGetRequestedOrders200ResponseInnerOrderItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vendorGetRequestedOrders_200_response_inner_orderItems_inner of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.  # noqa: E501
        :rtype: VendorGetRequestedOrders200ResponseInnerOrderItemsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self) -> str:
        """Gets the item_id of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.


        :return: The item_id of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.


        :param item_id: The item_id of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 40:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `40`")  # noqa: E501
        if item_id is not None and len(item_id) < 40:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `40`")  # noqa: E501

        self._item_id = item_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.

        Quantity of the specific item.  # noqa: E501

        :return: The quantity of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.

        Quantity of the specific item.  # noqa: E501

        :param quantity: The quantity of this VendorGetRequestedOrders200ResponseInnerOrderItemsInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity
