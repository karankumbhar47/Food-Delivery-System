from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryPersonDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, password=None, name=None, phone=None, email=None):  # noqa: E501
        """DeliveryPersonDetails - a model defined in OpenAPI

        :param username: The username of this DeliveryPersonDetails.  # noqa: E501
        :type username: str
        :param password: The password of this DeliveryPersonDetails.  # noqa: E501
        :type password: str
        :param name: The name of this DeliveryPersonDetails.  # noqa: E501
        :type name: str
        :param phone: The phone of this DeliveryPersonDetails.  # noqa: E501
        :type phone: str
        :param email: The email of this DeliveryPersonDetails.  # noqa: E501
        :type email: str
        """
        self.openapi_types = {
            'username': str,
            'password': str,
            'name': str,
            'phone': str,
            'email': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'name': 'name',
            'phone': 'phone',
            'email': 'email'
        }

        self._username = username
        self._password = password
        self._name = name
        self._phone = phone
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'DeliveryPersonDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The deliveryPersonDetails of this DeliveryPersonDetails.  # noqa: E501
        :rtype: DeliveryPersonDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this DeliveryPersonDetails.


        :return: The username of this DeliveryPersonDetails.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this DeliveryPersonDetails.


        :param username: The username of this DeliveryPersonDetails.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this DeliveryPersonDetails.


        :return: The password of this DeliveryPersonDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this DeliveryPersonDetails.


        :param password: The password of this DeliveryPersonDetails.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def name(self) -> str:
        """Gets the name of this DeliveryPersonDetails.


        :return: The name of this DeliveryPersonDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DeliveryPersonDetails.


        :param name: The name of this DeliveryPersonDetails.
        :type name: str
        """

        self._name = name

    @property
    def phone(self) -> str:
        """Gets the phone of this DeliveryPersonDetails.


        :return: The phone of this DeliveryPersonDetails.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this DeliveryPersonDetails.


        :param phone: The phone of this DeliveryPersonDetails.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def email(self) -> str:
        """Gets the email of this DeliveryPersonDetails.


        :return: The email of this DeliveryPersonDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this DeliveryPersonDetails.


        :param email: The email of this DeliveryPersonDetails.
        :type email: str
        """

        self._email = email
