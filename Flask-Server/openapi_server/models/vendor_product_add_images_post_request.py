from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class VendorProductAddImagesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id=None, image_urls=None):  # noqa: E501
        """VendorProductAddImagesPostRequest - a model defined in OpenAPI

        :param item_id: The item_id of this VendorProductAddImagesPostRequest.  # noqa: E501
        :type item_id: str
        :param image_urls: The image_urls of this VendorProductAddImagesPostRequest.  # noqa: E501
        :type image_urls: List[str]
        """
        self.openapi_types = {
            'item_id': str,
            'image_urls': List[str]
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'image_urls': 'imageUrls'
        }

        self._item_id = item_id
        self._image_urls = image_urls

    @classmethod
    def from_dict(cls, dikt) -> 'VendorProductAddImagesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _vendor_product_addImages_post_request of this VendorProductAddImagesPostRequest.  # noqa: E501
        :rtype: VendorProductAddImagesPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self) -> str:
        """Gets the item_id of this VendorProductAddImagesPostRequest.


        :return: The item_id of this VendorProductAddImagesPostRequest.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this VendorProductAddImagesPostRequest.


        :param item_id: The item_id of this VendorProductAddImagesPostRequest.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 40:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `40`")  # noqa: E501
        if item_id is not None and len(item_id) < 40:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `40`")  # noqa: E501

        self._item_id = item_id

    @property
    def image_urls(self) -> List[str]:
        """Gets the image_urls of this VendorProductAddImagesPostRequest.


        :return: The image_urls of this VendorProductAddImagesPostRequest.
        :rtype: List[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls: List[str]):
        """Sets the image_urls of this VendorProductAddImagesPostRequest.


        :param image_urls: The image_urls of this VendorProductAddImagesPostRequest.
        :type image_urls: List[str]
        """
        if image_urls is not None and len(image_urls) < 1:
            raise ValueError("Invalid value for `image_urls`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._image_urls = image_urls
