from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class FoodItemFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id=None, item_name=None, thumbnail_picture=None, price=None, vendor_name=None, vendor_location=None, star_rating=None, is_available=None, max_quantity=None, image_urls=None, tags=None):  # noqa: E501
        """FoodItemFull - a model defined in OpenAPI

        :param item_id: The item_id of this FoodItemFull.  # noqa: E501
        :type item_id: str
        :param item_name: The item_name of this FoodItemFull.  # noqa: E501
        :type item_name: str
        :param thumbnail_picture: The thumbnail_picture of this FoodItemFull.  # noqa: E501
        :type thumbnail_picture: str
        :param price: The price of this FoodItemFull.  # noqa: E501
        :type price: float
        :param vendor_name: The vendor_name of this FoodItemFull.  # noqa: E501
        :type vendor_name: str
        :param vendor_location: The vendor_location of this FoodItemFull.  # noqa: E501
        :type vendor_location: str
        :param star_rating: The star_rating of this FoodItemFull.  # noqa: E501
        :type star_rating: float
        :param is_available: The is_available of this FoodItemFull.  # noqa: E501
        :type is_available: bool
        :param max_quantity: The max_quantity of this FoodItemFull.  # noqa: E501
        :type max_quantity: int
        :param image_urls: The image_urls of this FoodItemFull.  # noqa: E501
        :type image_urls: List[str]
        :param tags: The tags of this FoodItemFull.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'item_id': str,
            'item_name': str,
            'thumbnail_picture': str,
            'price': float,
            'vendor_name': str,
            'vendor_location': str,
            'star_rating': float,
            'is_available': bool,
            'max_quantity': int,
            'image_urls': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'item_name': 'itemName',
            'thumbnail_picture': 'thumbnailPicture',
            'price': 'price',
            'vendor_name': 'vendorName',
            'vendor_location': 'vendorLocation',
            'star_rating': 'starRating',
            'is_available': 'isAvailable',
            'max_quantity': 'maxQuantity',
            'image_urls': 'imageUrls',
            'tags': 'tags'
        }

        self._item_id = item_id
        self._item_name = item_name
        self._thumbnail_picture = thumbnail_picture
        self._price = price
        self._vendor_name = vendor_name
        self._vendor_location = vendor_location
        self._star_rating = star_rating
        self._is_available = is_available
        self._max_quantity = max_quantity
        self._image_urls = image_urls
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'FoodItemFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The foodItemFull of this FoodItemFull.  # noqa: E501
        :rtype: FoodItemFull
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self) -> str:
        """Gets the item_id of this FoodItemFull.

        ID of the item  # noqa: E501

        :return: The item_id of this FoodItemFull.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this FoodItemFull.

        ID of the item  # noqa: E501

        :param item_id: The item_id of this FoodItemFull.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def item_name(self) -> str:
        """Gets the item_name of this FoodItemFull.

        Name of the item  # noqa: E501

        :return: The item_name of this FoodItemFull.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name: str):
        """Sets the item_name of this FoodItemFull.

        Name of the item  # noqa: E501

        :param item_name: The item_name of this FoodItemFull.
        :type item_name: str
        """

        self._item_name = item_name

    @property
    def thumbnail_picture(self) -> str:
        """Gets the thumbnail_picture of this FoodItemFull.

        64bit encoded thumbnail picture  # noqa: E501

        :return: The thumbnail_picture of this FoodItemFull.
        :rtype: str
        """
        return self._thumbnail_picture

    @thumbnail_picture.setter
    def thumbnail_picture(self, thumbnail_picture: str):
        """Sets the thumbnail_picture of this FoodItemFull.

        64bit encoded thumbnail picture  # noqa: E501

        :param thumbnail_picture: The thumbnail_picture of this FoodItemFull.
        :type thumbnail_picture: str
        """

        self._thumbnail_picture = thumbnail_picture

    @property
    def price(self) -> float:
        """Gets the price of this FoodItemFull.

        Price of the item  # noqa: E501

        :return: The price of this FoodItemFull.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this FoodItemFull.

        Price of the item  # noqa: E501

        :param price: The price of this FoodItemFull.
        :type price: float
        """

        self._price = price

    @property
    def vendor_name(self) -> str:
        """Gets the vendor_name of this FoodItemFull.

        Name of the vendor  # noqa: E501

        :return: The vendor_name of this FoodItemFull.
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name: str):
        """Sets the vendor_name of this FoodItemFull.

        Name of the vendor  # noqa: E501

        :param vendor_name: The vendor_name of this FoodItemFull.
        :type vendor_name: str
        """

        self._vendor_name = vendor_name

    @property
    def vendor_location(self) -> str:
        """Gets the vendor_location of this FoodItemFull.

        Location of the vendor  # noqa: E501

        :return: The vendor_location of this FoodItemFull.
        :rtype: str
        """
        return self._vendor_location

    @vendor_location.setter
    def vendor_location(self, vendor_location: str):
        """Sets the vendor_location of this FoodItemFull.

        Location of the vendor  # noqa: E501

        :param vendor_location: The vendor_location of this FoodItemFull.
        :type vendor_location: str
        """

        self._vendor_location = vendor_location

    @property
    def star_rating(self) -> float:
        """Gets the star_rating of this FoodItemFull.

        Star rating of the item  # noqa: E501

        :return: The star_rating of this FoodItemFull.
        :rtype: float
        """
        return self._star_rating

    @star_rating.setter
    def star_rating(self, star_rating: float):
        """Sets the star_rating of this FoodItemFull.

        Star rating of the item  # noqa: E501

        :param star_rating: The star_rating of this FoodItemFull.
        :type star_rating: float
        """

        self._star_rating = star_rating

    @property
    def is_available(self) -> bool:
        """Gets the is_available of this FoodItemFull.

        Indicates if the item is available  # noqa: E501

        :return: The is_available of this FoodItemFull.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available: bool):
        """Sets the is_available of this FoodItemFull.

        Indicates if the item is available  # noqa: E501

        :param is_available: The is_available of this FoodItemFull.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def max_quantity(self) -> int:
        """Gets the max_quantity of this FoodItemFull.

        Maximum quantity available  # noqa: E501

        :return: The max_quantity of this FoodItemFull.
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity: int):
        """Sets the max_quantity of this FoodItemFull.

        Maximum quantity available  # noqa: E501

        :param max_quantity: The max_quantity of this FoodItemFull.
        :type max_quantity: int
        """

        self._max_quantity = max_quantity

    @property
    def image_urls(self) -> List[str]:
        """Gets the image_urls of this FoodItemFull.

        URLs of additional images  # noqa: E501

        :return: The image_urls of this FoodItemFull.
        :rtype: List[str]
        """
        return self._image_urls

    @image_urls.setter
    def image_urls(self, image_urls: List[str]):
        """Sets the image_urls of this FoodItemFull.

        URLs of additional images  # noqa: E501

        :param image_urls: The image_urls of this FoodItemFull.
        :type image_urls: List[str]
        """

        self._image_urls = image_urls

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this FoodItemFull.

        tags related to food item  # noqa: E501

        :return: The tags of this FoodItemFull.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this FoodItemFull.

        tags related to food item  # noqa: E501

        :param tags: The tags of this FoodItemFull.
        :type tags: List[str]
        """

        self._tags = tags
