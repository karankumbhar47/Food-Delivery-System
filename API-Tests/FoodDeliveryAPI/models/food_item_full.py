# coding: utf-8

"""
    FDS

    This API allows to communicate with FDS (Food Delivery System) server. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FoodItemFull(BaseModel):
    """
    FoodItemFull
    """ # noqa: E501
    item_id: Optional[StrictStr] = Field(default=None, description="ID of the item", alias="itemId")
    item_name: Optional[StrictStr] = Field(default=None, description="Name of the item", alias="itemName")
    thumbnail_picture: Optional[StrictStr] = Field(default=None, description="64bit encoded thumbnail picture", alias="thumbnailPicture")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the item")
    vendor_name: Optional[StrictStr] = Field(default=None, description="Name of the vendor", alias="vendorName")
    vendor_location: Optional[StrictStr] = Field(default=None, description="Location of the vendor", alias="vendorLocation")
    star_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Star rating of the item", alias="starRating")
    is_available: Optional[StrictBool] = Field(default=None, description="Indicates if the item is available", alias="isAvailable")
    max_quantity: Optional[StrictInt] = Field(default=None, description="Maximum quantity available", alias="maxQuantity")
    image_urls: Optional[List[StrictStr]] = Field(default=None, description="URLs of additional images", alias="imageUrls")
    tags: Optional[List[StrictStr]] = Field(default=None, description="tags related to food item")
    __properties: ClassVar[List[str]] = ["itemId", "itemName", "thumbnailPicture", "price", "vendorName", "vendorLocation", "starRating", "isAvailable", "maxQuantity", "imageUrls", "tags"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FoodItemFull from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FoodItemFull from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemId": obj.get("itemId"),
            "itemName": obj.get("itemName"),
            "thumbnailPicture": obj.get("thumbnailPicture"),
            "price": obj.get("price"),
            "vendorName": obj.get("vendorName"),
            "vendorLocation": obj.get("vendorLocation"),
            "starRating": obj.get("starRating"),
            "isAvailable": obj.get("isAvailable"),
            "maxQuantity": obj.get("maxQuantity"),
            "imageUrls": obj.get("imageUrls"),
            "tags": obj.get("tags")
        })
        return _obj


