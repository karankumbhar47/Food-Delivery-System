# coding: utf-8

"""
    FDS

    This API allows to communicate with FDS (Food Delivery System) server. 

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from FoodDeliveryAPI.models.vendor_get_requested_orders200_response_inner_order_items_inner import VendorGetRequestedOrders200ResponseInnerOrderItemsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VendorGetRequestedOrders200ResponseInner(BaseModel):
    """
    VendorGetRequestedOrders200ResponseInner
    """ # noqa: E501
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    vendor_id: Optional[StrictStr] = Field(default=None, alias="vendorID")
    pickup_location: Optional[StrictStr] = Field(default=None, alias="pickupLocation")
    order_items: Optional[List[VendorGetRequestedOrders200ResponseInnerOrderItemsInner]] = Field(default=None, alias="orderItems")
    location: Optional[StrictStr] = Field(default=None, description="Delivery location.")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["orderId", "userId", "vendorID", "pickupLocation", "orderItems", "location", "price"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VendorGetRequestedOrders200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_items (list)
        _items = []
        if self.order_items:
            for _item in self.order_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VendorGetRequestedOrders200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderId": obj.get("orderId"),
            "userId": obj.get("userId"),
            "vendorID": obj.get("vendorID"),
            "pickupLocation": obj.get("pickupLocation"),
            "orderItems": [VendorGetRequestedOrders200ResponseInnerOrderItemsInner.from_dict(_item) for _item in obj.get("orderItems")] if obj.get("orderItems") is not None else None,
            "location": obj.get("location"),
            "price": obj.get("price")
        })
        return _obj


